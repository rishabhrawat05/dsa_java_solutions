// Brute Force Approach
class Solution
{
    public static Node reverse(Node head){
       
        Node prev=null;
        Node curr=head;
        while(curr!=null){
            Node front=curr.next;
            curr.next=prev;
            prev=curr;
            curr=front;
        }
        return prev;
    }
    public static Node addOne(Node head) 
    { 
        //code here.
        head=reverse(head);
        Node temp=head;
        int carry=1;
        while(temp!=null){
            temp.data+=carry;
            if(temp.data<10){
                carry=0;
                break;
            }
            else{
                temp.data=0;
                carry=1;
            }
            temp=temp.next;
        }
        if(carry==1){
            Node newOne=new Node(1);
            head=reverse(head);
            newOne.next=head;
            return newOne;
            
        }
        return reverse(head);
       
    }
}

// Optimal Approach
class Solution
{
    public static int helper(Node head){
        if(head==null){
            return 1;
        }
        int carry=helper(head.next);
        head.data+=carry;
        if(head.data<10){
            return 0;
        }
        head.data=0;
        return 1;
        
    }
    public static Node addOne(Node head) 
    { 
        //code here.
        int carry=helper(head);
        if(carry==1){
            Node newNode=new Node(1);
            newNode.next=head;
            head=newNode;
        }
        return head;
    }
}
