//Brute Force Approach
class Solution {
    public boolean isPalindrome(ListNode head) {
        Stack<Integer> st=new Stack<>();
        ListNode temp=head;
        while(temp!=null){
            st.push(temp.val);
            temp=temp.next;
        }
        temp=head;
        int flag=0;
        while(!st.isEmpty()){
            if(temp.val==st.pop()){
                flag=1;
            }
            else{
                return false;
            }
            temp=temp.next;
            
        }
        if(flag==1){
            return true;
        }
        else{
            return false;
        }
    }
}

//Optimal Approach

class Solution {
    public ListNode reverseList(ListNode rev){
        if(rev==null || rev.next==null){
            return rev;
        }
        ListNode prev=null;
        ListNode next=null;
        ListNode temp=rev;
        while(temp!=null){
            next=temp.next;
            temp.next=prev;
            prev=temp;
            temp=next;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return true;
        }
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode newHead=reverseList(slow.next);
        ListNode first=head;
        ListNode second=newHead;
        while(second!=null){
            if(first.val!=second.val){
                reverseList(newHead);
                return false;
            }
            first=first.next;
            second=second.next;
        }
        reverseList(newHead);
        return true;
        }
}
